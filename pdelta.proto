// Generated by srotoc. DO NOT EDIT!

syntax = "proto3";

package pdelta;

option go_package = "github.com/tomlinford/pdelta/pdeltapb";

// Flags only use 7 bits, so they can be efficiently coded in a
// varint. The layout is: UOOONNN
// The 3 least significant bits are for new fields.
// The next 3 bits are for old fields.
// If set, the value will be between 1 and 6 inclusive (7 is
// currently unused).
// The most significant bit represents whether the field is
// unchanged.
enum Flag {
    FLAG_UNSPECIFIED = 0;

    // NOT_SET just means deleted.
    NOT_SET = 1;

    // To avoid relying on proto3 optional semantics, if the
    // field is set, but set to a default value, we'll note that
    // as a flag here.
    EMPTY_BYTES = 2;
    DEFAULT_VARINT = 3;
    DEFAULT_FIXED32 = 4;
    DEFAULT_FIXED64 = 5;

    // Why we need the SET_ELSEWHERE flag:
    // Suppose you have a repeated field with values [f1]
    // You prepend a new value f2 and get [f2, f1]
    // Assume f2 is very similar to f1.
    // Ideal encoding would have (note: `number` field omitted):
    // f1 -> f2 mapping: {index: 0, fields: ...}
    // f1 -> f1 new index mapping:
    // {old_index: 0, new_index: 1, flags: UNCHANGED}
    // But this makes the deletion of index 1 when reversing
    // implicit, so therefore we must add:
    // {index: 1, flags: OLD_IS_NOT_SET | NEW_IS_SET_ELSEWHERE}
    SET_ELSEWHERE = 6;
    MASK = 7;

    // Represents whether the field has been unchanged, which is
    // only used in Field messages where new_index != old_index and
    // nothing else in the field value has changed.
    UNCHANGED = 64;
}

// Field represents a (potentially) bidirectional delta of a specific
// field value. Each entry inside a message (including individual
// entries for repeated fields) will have its own instance of a Field.
// Note that the Field message is designed to be wire-compatible with
// all the other messages defined in this file.
message Field {
    enum Flag {
        FLAG_UNSPECIFIED = 0;

        // To get a pdelta.Flag, bitwise-and field.flag with 7.
        NEW_IS_NOT_SET = 1;
        NEW_IS_EMPTY_BYTES = 2;
        NEW_IS_DEFAULT_VARINT = 3;
        NEW_IS_DEFAULT_FIXED32 = 4;
        NEW_IS_DEFAULT_FIXED64 = 5;
        NEW_IS_SET_ELSEWHERE = 6;
        NEW_FLAG_MASK = 7;

        // To get a pdelta.Flag, bitwise-and field.flag with 56
        // and bitwise-rshift by 3.
        OLD_IS_NOT_SET = 8;
        OLD_IS_EMPTY_BYTES = 16;
        OLD_IS_DEFAULT_VARINT = 24;
        OLD_IS_DEFAULT_FIXED32 = 32;
        OLD_IS_DEFAULT_FIXED64 = 40;
        OLD_IS_SET_ELSEWHERE = 48;
        OLD_FLAG_MASK = 56;

        // This should only be set if new_index != old_index.
        UNCHANGED = 64;
    }
    Flag flags = 1;

    // Fine-grained field edits. Only used if we're inside a message.
    repeated Field fields = 2;

    // Note this can also fully overwrite messages if it's determined
    // that a full overwrite would take up less space than
    // fine-grained edits.
    bytes new_bytes = 3;
    bytes old_bytes = 4;

    // Field number of the current field.
    int32 number = 5;

    // If new_index == old_index, this field is referenced to
    // determine the index of the current field. If the field is not
    // repeated, this value will trivially be 0, but if the field is
    // repeated, this refers to which index we're changing.
    int32 index = 6;

    // If new_index != old_index, the ordering of the fields has
    // likely shifted. Note that functionality to set these fields
    // is not currently implemented.
    int32 new_index = 7;
    int32 old_index = 8;

    // Literal old or new values are stored in these fields. This
    // is intended to match the different kinds of encoded protobuf
    // types, not the different kinds of defined protobuf types. So
    // for example a `double` would be stored in a `fixed64` field.
    uint64 new_varint = 9;
    uint64 old_varint = 10;
    fixed32 new_fixed32 = 11;
    fixed32 old_fixed32 = 12;
    fixed64 new_fixed64 = 13;
    fixed64 old_fixed64 = 14;
}

// See `Field` for documentation.
message ForwardField {
    enum Flag {
        FLAG_UNSPECIFIED = 0;
        NEW_IS_NOT_SET = 1;
        NEW_IS_EMPTY_BYTES = 2;
        NEW_IS_DEFAULT_VARINT = 3;
        NEW_IS_DEFAULT_FIXED32 = 4;
        NEW_IS_DEFAULT_FIXED64 = 5;
        NEW_FLAG_MASK = 7;
        UNCHANGED = 64;
    }
    Flag flags = 1;
    repeated ForwardField fields = 2;
    bytes new_bytes = 3;
    int32 number = 5;
    int32 index = 6;
    int32 new_index = 7;
    int32 old_index = 8;
    uint64 new_varint = 9;
    fixed32 new_fixed32 = 11;
    fixed64 new_fixed64 = 13;
}

// See `Field` and `Message` for documentation.
message ForwardMessage {
    enum Flag {
        FLAG_UNSPECIFIED = 0;
        NEW_IS_NOT_SET = 1;
        NEW_IS_EMPTY_BYTES = 2;
        NEW_FLAG_MASK = 7;
    }
    Flag flags = 1;
    repeated ForwardField fields = 2;
    bytes new_bytes = 3;
}

// Message is a strict subset of Field but will be the type that is
// generally used by clients. A client may have a message in their
// type and a pdelta.Message and will want to apply that
// pdelta.Message to their message. Alternatively, the client may have
// two messages of their own type and will want to generate a
// pdelta.Message to get a delta between the types.
//
// If clients only care about applying deltas in one direction, they
// can use either ForwardMessage or ReverseMessage. These are
// wire-compatible with Message but enable a reduction in storage
// usage.
//
// The protocol was designed to be explicit about changes. This means
// that if when applying or reverting a delta on a particular
// message, any change to that message will have at least one bit of
// information. While this helps us to retain potentially critical
// data, this has an added benefit of letting us check if applying a
// change is invalid due to not having generated changes for that
// direction.
message Message {
    enum Flag {
        FLAG_UNSPECIFIED = 0;
        NEW_IS_NOT_SET = 1;
        NEW_IS_EMPTY_BYTES = 2;
        NEW_FLAG_MASK = 7;
        OLD_IS_NOT_SET = 8;
        OLD_IS_EMPTY_BYTES = 16;
        OLD_FLAG_MASK = 56;
    }
    Flag flags = 1;
    repeated Field fields = 2;
    bytes new_bytes = 3;
    bytes old_bytes = 4;
}

// See `Field` for documentation.
message ReverseField {
    enum Flag {
        FLAG_UNSPECIFIED = 0;
        OLD_IS_NOT_SET = 8;
        OLD_IS_EMPTY_BYTES = 16;
        OLD_IS_DEFAULT_VARINT = 24;
        OLD_IS_DEFAULT_FIXED32 = 32;
        OLD_IS_DEFAULT_FIXED64 = 40;
        OLD_FLAG_MASK = 56;
        UNCHANGED = 64;
    }
    Flag flags = 1;
    repeated ReverseField fields = 2;
    bytes old_bytes = 4;
    int32 number = 5;
    int32 index = 6;
    int32 new_index = 7;
    int32 old_index = 8;
    uint64 old_varint = 10;
    fixed32 old_fixed32 = 12;
    fixed64 old_fixed64 = 14;
}

// See `Field` and `Message` for documentation.
message ReverseMessage {
    enum Flag {
        FLAG_UNSPECIFIED = 0;
        OLD_IS_NOT_SET = 8;
        OLD_IS_EMPTY_BYTES = 16;
        OLD_FLAG_MASK = 56;
    }
    Flag flags = 1;
    repeated ReverseField fields = 2;
    bytes old_bytes = 4;
}
