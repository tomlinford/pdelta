// Generated by srotoc. DO NOT EDIT!

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: pdelta.proto

package pdeltapb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Flags only use 7 bits, so they can be efficiently coded in a
// varint. The layout is: UOOONNN
// The 3 least significant bits are for new fields.
// The next 3 bits are for old fields.
// If set, the value will be between 1 and 6 inclusive (7 is
// currently unused).
// The most significant bit represents whether the field is
// unchanged.
type Flag int32

const (
	Flag_FLAG_UNSPECIFIED Flag = 0
	// NOT_SET just means deleted.
	Flag_NOT_SET Flag = 1
	// To avoid relying on proto3 optional semantics, if the
	// field is set, but set to a default value, we'll note that
	// as a flag here.
	Flag_EMPTY_BYTES     Flag = 2
	Flag_DEFAULT_VARINT  Flag = 3
	Flag_DEFAULT_FIXED32 Flag = 4
	Flag_DEFAULT_FIXED64 Flag = 5
	// Why we need the SET_ELSEWHERE flag:
	// Suppose you have a repeated field with values [f1]
	// You prepend a new value f2 and get [f2, f1]
	// Assume f2 is very similar to f1.
	// Ideal encoding would have (note: `number` field omitted):
	// f1 -> f2 mapping: {index: 0, fields: ...}
	// f1 -> f1 new index mapping:
	// {old_index: 0, new_index: 1, flags: UNCHANGED}
	// But this makes the deletion of index 1 when reversing
	// implicit, so therefore we must add:
	// {index: 1, flags: OLD_IS_NOT_SET | NEW_IS_SET_ELSEWHERE}
	Flag_SET_ELSEWHERE Flag = 6
	Flag_MASK          Flag = 7
	// Represents whether the field has been unchanged, which is
	// only used in Field messages where new_index != old_index and
	// nothing else in the field value has changed.
	Flag_UNCHANGED Flag = 64
)

// Enum value maps for Flag.
var (
	Flag_name = map[int32]string{
		0:  "FLAG_UNSPECIFIED",
		1:  "NOT_SET",
		2:  "EMPTY_BYTES",
		3:  "DEFAULT_VARINT",
		4:  "DEFAULT_FIXED32",
		5:  "DEFAULT_FIXED64",
		6:  "SET_ELSEWHERE",
		7:  "MASK",
		64: "UNCHANGED",
	}
	Flag_value = map[string]int32{
		"FLAG_UNSPECIFIED": 0,
		"NOT_SET":          1,
		"EMPTY_BYTES":      2,
		"DEFAULT_VARINT":   3,
		"DEFAULT_FIXED32":  4,
		"DEFAULT_FIXED64":  5,
		"SET_ELSEWHERE":    6,
		"MASK":             7,
		"UNCHANGED":        64,
	}
)

func (x Flag) Enum() *Flag {
	p := new(Flag)
	*p = x
	return p
}

func (x Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_pdelta_proto_enumTypes[0].Descriptor()
}

func (Flag) Type() protoreflect.EnumType {
	return &file_pdelta_proto_enumTypes[0]
}

func (x Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Flag.Descriptor instead.
func (Flag) EnumDescriptor() ([]byte, []int) {
	return file_pdelta_proto_rawDescGZIP(), []int{0}
}

type Field_Flag int32

const (
	Field_FLAG_UNSPECIFIED Field_Flag = 0
	// To get a pdelta.Flag, bitwise-and field.flag with 7.
	Field_NEW_IS_NOT_SET         Field_Flag = 1
	Field_NEW_IS_EMPTY_BYTES     Field_Flag = 2
	Field_NEW_IS_DEFAULT_VARINT  Field_Flag = 3
	Field_NEW_IS_DEFAULT_FIXED32 Field_Flag = 4
	Field_NEW_IS_DEFAULT_FIXED64 Field_Flag = 5
	Field_NEW_IS_SET_ELSEWHERE   Field_Flag = 6
	Field_NEW_FLAG_MASK          Field_Flag = 7
	// To get a pdelta.Flag, bitwise-and field.flag with 56
	// and bitwise-rshift by 3.
	Field_OLD_IS_NOT_SET         Field_Flag = 8
	Field_OLD_IS_EMPTY_BYTES     Field_Flag = 16
	Field_OLD_IS_DEFAULT_VARINT  Field_Flag = 24
	Field_OLD_IS_DEFAULT_FIXED32 Field_Flag = 32
	Field_OLD_IS_DEFAULT_FIXED64 Field_Flag = 40
	Field_OLD_IS_SET_ELSEWHERE   Field_Flag = 48
	Field_OLD_FLAG_MASK          Field_Flag = 56
	// This should only be set if new_index != old_index.
	Field_UNCHANGED Field_Flag = 64
)

// Enum value maps for Field_Flag.
var (
	Field_Flag_name = map[int32]string{
		0:  "FLAG_UNSPECIFIED",
		1:  "NEW_IS_NOT_SET",
		2:  "NEW_IS_EMPTY_BYTES",
		3:  "NEW_IS_DEFAULT_VARINT",
		4:  "NEW_IS_DEFAULT_FIXED32",
		5:  "NEW_IS_DEFAULT_FIXED64",
		6:  "NEW_IS_SET_ELSEWHERE",
		7:  "NEW_FLAG_MASK",
		8:  "OLD_IS_NOT_SET",
		16: "OLD_IS_EMPTY_BYTES",
		24: "OLD_IS_DEFAULT_VARINT",
		32: "OLD_IS_DEFAULT_FIXED32",
		40: "OLD_IS_DEFAULT_FIXED64",
		48: "OLD_IS_SET_ELSEWHERE",
		56: "OLD_FLAG_MASK",
		64: "UNCHANGED",
	}
	Field_Flag_value = map[string]int32{
		"FLAG_UNSPECIFIED":       0,
		"NEW_IS_NOT_SET":         1,
		"NEW_IS_EMPTY_BYTES":     2,
		"NEW_IS_DEFAULT_VARINT":  3,
		"NEW_IS_DEFAULT_FIXED32": 4,
		"NEW_IS_DEFAULT_FIXED64": 5,
		"NEW_IS_SET_ELSEWHERE":   6,
		"NEW_FLAG_MASK":          7,
		"OLD_IS_NOT_SET":         8,
		"OLD_IS_EMPTY_BYTES":     16,
		"OLD_IS_DEFAULT_VARINT":  24,
		"OLD_IS_DEFAULT_FIXED32": 32,
		"OLD_IS_DEFAULT_FIXED64": 40,
		"OLD_IS_SET_ELSEWHERE":   48,
		"OLD_FLAG_MASK":          56,
		"UNCHANGED":              64,
	}
)

func (x Field_Flag) Enum() *Field_Flag {
	p := new(Field_Flag)
	*p = x
	return p
}

func (x Field_Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Field_Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_pdelta_proto_enumTypes[1].Descriptor()
}

func (Field_Flag) Type() protoreflect.EnumType {
	return &file_pdelta_proto_enumTypes[1]
}

func (x Field_Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Field_Flag.Descriptor instead.
func (Field_Flag) EnumDescriptor() ([]byte, []int) {
	return file_pdelta_proto_rawDescGZIP(), []int{0, 0}
}

type ForwardField_Flag int32

const (
	ForwardField_FLAG_UNSPECIFIED       ForwardField_Flag = 0
	ForwardField_NEW_IS_NOT_SET         ForwardField_Flag = 1
	ForwardField_NEW_IS_EMPTY_BYTES     ForwardField_Flag = 2
	ForwardField_NEW_IS_DEFAULT_VARINT  ForwardField_Flag = 3
	ForwardField_NEW_IS_DEFAULT_FIXED32 ForwardField_Flag = 4
	ForwardField_NEW_IS_DEFAULT_FIXED64 ForwardField_Flag = 5
	ForwardField_NEW_FLAG_MASK          ForwardField_Flag = 7
	ForwardField_UNCHANGED              ForwardField_Flag = 64
)

// Enum value maps for ForwardField_Flag.
var (
	ForwardField_Flag_name = map[int32]string{
		0:  "FLAG_UNSPECIFIED",
		1:  "NEW_IS_NOT_SET",
		2:  "NEW_IS_EMPTY_BYTES",
		3:  "NEW_IS_DEFAULT_VARINT",
		4:  "NEW_IS_DEFAULT_FIXED32",
		5:  "NEW_IS_DEFAULT_FIXED64",
		7:  "NEW_FLAG_MASK",
		64: "UNCHANGED",
	}
	ForwardField_Flag_value = map[string]int32{
		"FLAG_UNSPECIFIED":       0,
		"NEW_IS_NOT_SET":         1,
		"NEW_IS_EMPTY_BYTES":     2,
		"NEW_IS_DEFAULT_VARINT":  3,
		"NEW_IS_DEFAULT_FIXED32": 4,
		"NEW_IS_DEFAULT_FIXED64": 5,
		"NEW_FLAG_MASK":          7,
		"UNCHANGED":              64,
	}
)

func (x ForwardField_Flag) Enum() *ForwardField_Flag {
	p := new(ForwardField_Flag)
	*p = x
	return p
}

func (x ForwardField_Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ForwardField_Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_pdelta_proto_enumTypes[2].Descriptor()
}

func (ForwardField_Flag) Type() protoreflect.EnumType {
	return &file_pdelta_proto_enumTypes[2]
}

func (x ForwardField_Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ForwardField_Flag.Descriptor instead.
func (ForwardField_Flag) EnumDescriptor() ([]byte, []int) {
	return file_pdelta_proto_rawDescGZIP(), []int{1, 0}
}

type ForwardMessage_Flag int32

const (
	ForwardMessage_FLAG_UNSPECIFIED   ForwardMessage_Flag = 0
	ForwardMessage_NEW_IS_NOT_SET     ForwardMessage_Flag = 1
	ForwardMessage_NEW_IS_EMPTY_BYTES ForwardMessage_Flag = 2
	ForwardMessage_NEW_FLAG_MASK      ForwardMessage_Flag = 7
)

// Enum value maps for ForwardMessage_Flag.
var (
	ForwardMessage_Flag_name = map[int32]string{
		0: "FLAG_UNSPECIFIED",
		1: "NEW_IS_NOT_SET",
		2: "NEW_IS_EMPTY_BYTES",
		7: "NEW_FLAG_MASK",
	}
	ForwardMessage_Flag_value = map[string]int32{
		"FLAG_UNSPECIFIED":   0,
		"NEW_IS_NOT_SET":     1,
		"NEW_IS_EMPTY_BYTES": 2,
		"NEW_FLAG_MASK":      7,
	}
)

func (x ForwardMessage_Flag) Enum() *ForwardMessage_Flag {
	p := new(ForwardMessage_Flag)
	*p = x
	return p
}

func (x ForwardMessage_Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ForwardMessage_Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_pdelta_proto_enumTypes[3].Descriptor()
}

func (ForwardMessage_Flag) Type() protoreflect.EnumType {
	return &file_pdelta_proto_enumTypes[3]
}

func (x ForwardMessage_Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ForwardMessage_Flag.Descriptor instead.
func (ForwardMessage_Flag) EnumDescriptor() ([]byte, []int) {
	return file_pdelta_proto_rawDescGZIP(), []int{2, 0}
}

type Message_Flag int32

const (
	Message_FLAG_UNSPECIFIED   Message_Flag = 0
	Message_NEW_IS_NOT_SET     Message_Flag = 1
	Message_NEW_IS_EMPTY_BYTES Message_Flag = 2
	Message_NEW_FLAG_MASK      Message_Flag = 7
	Message_OLD_IS_NOT_SET     Message_Flag = 8
	Message_OLD_IS_EMPTY_BYTES Message_Flag = 16
	Message_OLD_FLAG_MASK      Message_Flag = 56
)

// Enum value maps for Message_Flag.
var (
	Message_Flag_name = map[int32]string{
		0:  "FLAG_UNSPECIFIED",
		1:  "NEW_IS_NOT_SET",
		2:  "NEW_IS_EMPTY_BYTES",
		7:  "NEW_FLAG_MASK",
		8:  "OLD_IS_NOT_SET",
		16: "OLD_IS_EMPTY_BYTES",
		56: "OLD_FLAG_MASK",
	}
	Message_Flag_value = map[string]int32{
		"FLAG_UNSPECIFIED":   0,
		"NEW_IS_NOT_SET":     1,
		"NEW_IS_EMPTY_BYTES": 2,
		"NEW_FLAG_MASK":      7,
		"OLD_IS_NOT_SET":     8,
		"OLD_IS_EMPTY_BYTES": 16,
		"OLD_FLAG_MASK":      56,
	}
)

func (x Message_Flag) Enum() *Message_Flag {
	p := new(Message_Flag)
	*p = x
	return p
}

func (x Message_Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_pdelta_proto_enumTypes[4].Descriptor()
}

func (Message_Flag) Type() protoreflect.EnumType {
	return &file_pdelta_proto_enumTypes[4]
}

func (x Message_Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Message_Flag.Descriptor instead.
func (Message_Flag) EnumDescriptor() ([]byte, []int) {
	return file_pdelta_proto_rawDescGZIP(), []int{3, 0}
}

type ReverseField_Flag int32

const (
	ReverseField_FLAG_UNSPECIFIED       ReverseField_Flag = 0
	ReverseField_OLD_IS_NOT_SET         ReverseField_Flag = 8
	ReverseField_OLD_IS_EMPTY_BYTES     ReverseField_Flag = 16
	ReverseField_OLD_IS_DEFAULT_VARINT  ReverseField_Flag = 24
	ReverseField_OLD_IS_DEFAULT_FIXED32 ReverseField_Flag = 32
	ReverseField_OLD_IS_DEFAULT_FIXED64 ReverseField_Flag = 40
	ReverseField_OLD_FLAG_MASK          ReverseField_Flag = 56
	ReverseField_UNCHANGED              ReverseField_Flag = 64
)

// Enum value maps for ReverseField_Flag.
var (
	ReverseField_Flag_name = map[int32]string{
		0:  "FLAG_UNSPECIFIED",
		8:  "OLD_IS_NOT_SET",
		16: "OLD_IS_EMPTY_BYTES",
		24: "OLD_IS_DEFAULT_VARINT",
		32: "OLD_IS_DEFAULT_FIXED32",
		40: "OLD_IS_DEFAULT_FIXED64",
		56: "OLD_FLAG_MASK",
		64: "UNCHANGED",
	}
	ReverseField_Flag_value = map[string]int32{
		"FLAG_UNSPECIFIED":       0,
		"OLD_IS_NOT_SET":         8,
		"OLD_IS_EMPTY_BYTES":     16,
		"OLD_IS_DEFAULT_VARINT":  24,
		"OLD_IS_DEFAULT_FIXED32": 32,
		"OLD_IS_DEFAULT_FIXED64": 40,
		"OLD_FLAG_MASK":          56,
		"UNCHANGED":              64,
	}
)

func (x ReverseField_Flag) Enum() *ReverseField_Flag {
	p := new(ReverseField_Flag)
	*p = x
	return p
}

func (x ReverseField_Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReverseField_Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_pdelta_proto_enumTypes[5].Descriptor()
}

func (ReverseField_Flag) Type() protoreflect.EnumType {
	return &file_pdelta_proto_enumTypes[5]
}

func (x ReverseField_Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReverseField_Flag.Descriptor instead.
func (ReverseField_Flag) EnumDescriptor() ([]byte, []int) {
	return file_pdelta_proto_rawDescGZIP(), []int{4, 0}
}

type ReverseMessage_Flag int32

const (
	ReverseMessage_FLAG_UNSPECIFIED   ReverseMessage_Flag = 0
	ReverseMessage_OLD_IS_NOT_SET     ReverseMessage_Flag = 8
	ReverseMessage_OLD_IS_EMPTY_BYTES ReverseMessage_Flag = 16
	ReverseMessage_OLD_FLAG_MASK      ReverseMessage_Flag = 56
)

// Enum value maps for ReverseMessage_Flag.
var (
	ReverseMessage_Flag_name = map[int32]string{
		0:  "FLAG_UNSPECIFIED",
		8:  "OLD_IS_NOT_SET",
		16: "OLD_IS_EMPTY_BYTES",
		56: "OLD_FLAG_MASK",
	}
	ReverseMessage_Flag_value = map[string]int32{
		"FLAG_UNSPECIFIED":   0,
		"OLD_IS_NOT_SET":     8,
		"OLD_IS_EMPTY_BYTES": 16,
		"OLD_FLAG_MASK":      56,
	}
)

func (x ReverseMessage_Flag) Enum() *ReverseMessage_Flag {
	p := new(ReverseMessage_Flag)
	*p = x
	return p
}

func (x ReverseMessage_Flag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReverseMessage_Flag) Descriptor() protoreflect.EnumDescriptor {
	return file_pdelta_proto_enumTypes[6].Descriptor()
}

func (ReverseMessage_Flag) Type() protoreflect.EnumType {
	return &file_pdelta_proto_enumTypes[6]
}

func (x ReverseMessage_Flag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReverseMessage_Flag.Descriptor instead.
func (ReverseMessage_Flag) EnumDescriptor() ([]byte, []int) {
	return file_pdelta_proto_rawDescGZIP(), []int{5, 0}
}

// Field represents a (potentially) bidirectional delta of a specific
// field value. Each entry inside a message (including individual
// entries for repeated fields) will have its own instance of a Field.
// Note that the Field message is designed to be wire-compatible with
// all the other messages defined in this file.
type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags Field_Flag `protobuf:"varint,1,opt,name=flags,proto3,enum=pdelta.Field_Flag" json:"flags,omitempty"`
	// Fine-grained field edits. Only used if we're inside a message.
	Fields []*Field `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	// Note this can also fully overwrite messages if it's determined
	// that a full overwrite would take up less space than
	// fine-grained edits.
	NewBytes []byte `protobuf:"bytes,3,opt,name=new_bytes,json=newBytes,proto3" json:"new_bytes,omitempty"`
	OldBytes []byte `protobuf:"bytes,4,opt,name=old_bytes,json=oldBytes,proto3" json:"old_bytes,omitempty"`
	// Field number of the current field.
	Number int32 `protobuf:"varint,5,opt,name=number,proto3" json:"number,omitempty"`
	// If new_index == old_index, this field is referenced to
	// determine the index of the current field. If the field is not
	// repeated, this value will trivially be 0, but if the field is
	// repeated, this refers to which index we're changing.
	Index int32 `protobuf:"varint,6,opt,name=index,proto3" json:"index,omitempty"`
	// If new_index != old_index, the ordering of the fields has
	// likely shifted. Note that functionality to set these fields
	// is not currently implemented.
	NewIndex int32 `protobuf:"varint,7,opt,name=new_index,json=newIndex,proto3" json:"new_index,omitempty"`
	OldIndex int32 `protobuf:"varint,8,opt,name=old_index,json=oldIndex,proto3" json:"old_index,omitempty"`
	// Literal old or new values are stored in these fields. This
	// is intended to match the different kinds of encoded protobuf
	// types, not the different kinds of defined protobuf types. So
	// for example a `double` would be stored in a `fixed64` field.
	NewVarint  uint64 `protobuf:"varint,9,opt,name=new_varint,json=newVarint,proto3" json:"new_varint,omitempty"`
	OldVarint  uint64 `protobuf:"varint,10,opt,name=old_varint,json=oldVarint,proto3" json:"old_varint,omitempty"`
	NewFixed32 uint32 `protobuf:"fixed32,11,opt,name=new_fixed32,json=newFixed32,proto3" json:"new_fixed32,omitempty"`
	OldFixed32 uint32 `protobuf:"fixed32,12,opt,name=old_fixed32,json=oldFixed32,proto3" json:"old_fixed32,omitempty"`
	NewFixed64 uint64 `protobuf:"fixed64,13,opt,name=new_fixed64,json=newFixed64,proto3" json:"new_fixed64,omitempty"`
	OldFixed64 uint64 `protobuf:"fixed64,14,opt,name=old_fixed64,json=oldFixed64,proto3" json:"old_fixed64,omitempty"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdelta_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_pdelta_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_pdelta_proto_rawDescGZIP(), []int{0}
}

func (x *Field) GetFlags() Field_Flag {
	if x != nil {
		return x.Flags
	}
	return Field_FLAG_UNSPECIFIED
}

func (x *Field) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Field) GetNewBytes() []byte {
	if x != nil {
		return x.NewBytes
	}
	return nil
}

func (x *Field) GetOldBytes() []byte {
	if x != nil {
		return x.OldBytes
	}
	return nil
}

func (x *Field) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Field) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Field) GetNewIndex() int32 {
	if x != nil {
		return x.NewIndex
	}
	return 0
}

func (x *Field) GetOldIndex() int32 {
	if x != nil {
		return x.OldIndex
	}
	return 0
}

func (x *Field) GetNewVarint() uint64 {
	if x != nil {
		return x.NewVarint
	}
	return 0
}

func (x *Field) GetOldVarint() uint64 {
	if x != nil {
		return x.OldVarint
	}
	return 0
}

func (x *Field) GetNewFixed32() uint32 {
	if x != nil {
		return x.NewFixed32
	}
	return 0
}

func (x *Field) GetOldFixed32() uint32 {
	if x != nil {
		return x.OldFixed32
	}
	return 0
}

func (x *Field) GetNewFixed64() uint64 {
	if x != nil {
		return x.NewFixed64
	}
	return 0
}

func (x *Field) GetOldFixed64() uint64 {
	if x != nil {
		return x.OldFixed64
	}
	return 0
}

// See `Field` for documentation.
type ForwardField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags      ForwardField_Flag `protobuf:"varint,1,opt,name=flags,proto3,enum=pdelta.ForwardField_Flag" json:"flags,omitempty"`
	Fields     []*ForwardField   `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	NewBytes   []byte            `protobuf:"bytes,3,opt,name=new_bytes,json=newBytes,proto3" json:"new_bytes,omitempty"`
	Number     int32             `protobuf:"varint,5,opt,name=number,proto3" json:"number,omitempty"`
	Index      int32             `protobuf:"varint,6,opt,name=index,proto3" json:"index,omitempty"`
	NewIndex   int32             `protobuf:"varint,7,opt,name=new_index,json=newIndex,proto3" json:"new_index,omitempty"`
	OldIndex   int32             `protobuf:"varint,8,opt,name=old_index,json=oldIndex,proto3" json:"old_index,omitempty"`
	NewVarint  uint64            `protobuf:"varint,9,opt,name=new_varint,json=newVarint,proto3" json:"new_varint,omitempty"`
	NewFixed32 uint32            `protobuf:"fixed32,11,opt,name=new_fixed32,json=newFixed32,proto3" json:"new_fixed32,omitempty"`
	NewFixed64 uint64            `protobuf:"fixed64,13,opt,name=new_fixed64,json=newFixed64,proto3" json:"new_fixed64,omitempty"`
}

func (x *ForwardField) Reset() {
	*x = ForwardField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdelta_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardField) ProtoMessage() {}

func (x *ForwardField) ProtoReflect() protoreflect.Message {
	mi := &file_pdelta_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardField.ProtoReflect.Descriptor instead.
func (*ForwardField) Descriptor() ([]byte, []int) {
	return file_pdelta_proto_rawDescGZIP(), []int{1}
}

func (x *ForwardField) GetFlags() ForwardField_Flag {
	if x != nil {
		return x.Flags
	}
	return ForwardField_FLAG_UNSPECIFIED
}

func (x *ForwardField) GetFields() []*ForwardField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ForwardField) GetNewBytes() []byte {
	if x != nil {
		return x.NewBytes
	}
	return nil
}

func (x *ForwardField) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ForwardField) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ForwardField) GetNewIndex() int32 {
	if x != nil {
		return x.NewIndex
	}
	return 0
}

func (x *ForwardField) GetOldIndex() int32 {
	if x != nil {
		return x.OldIndex
	}
	return 0
}

func (x *ForwardField) GetNewVarint() uint64 {
	if x != nil {
		return x.NewVarint
	}
	return 0
}

func (x *ForwardField) GetNewFixed32() uint32 {
	if x != nil {
		return x.NewFixed32
	}
	return 0
}

func (x *ForwardField) GetNewFixed64() uint64 {
	if x != nil {
		return x.NewFixed64
	}
	return 0
}

// See `Field` and `Message` for documentation.
type ForwardMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags    ForwardMessage_Flag `protobuf:"varint,1,opt,name=flags,proto3,enum=pdelta.ForwardMessage_Flag" json:"flags,omitempty"`
	Fields   []*ForwardField     `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	NewBytes []byte              `protobuf:"bytes,3,opt,name=new_bytes,json=newBytes,proto3" json:"new_bytes,omitempty"`
}

func (x *ForwardMessage) Reset() {
	*x = ForwardMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdelta_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardMessage) ProtoMessage() {}

func (x *ForwardMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pdelta_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardMessage.ProtoReflect.Descriptor instead.
func (*ForwardMessage) Descriptor() ([]byte, []int) {
	return file_pdelta_proto_rawDescGZIP(), []int{2}
}

func (x *ForwardMessage) GetFlags() ForwardMessage_Flag {
	if x != nil {
		return x.Flags
	}
	return ForwardMessage_FLAG_UNSPECIFIED
}

func (x *ForwardMessage) GetFields() []*ForwardField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ForwardMessage) GetNewBytes() []byte {
	if x != nil {
		return x.NewBytes
	}
	return nil
}

// Message is a strict subset of Field but will be the type that is
// generally used by clients. A client may have a message in their
// type and a pdelta.Message and will want to apply that
// pdelta.Message to their message. Alternatively, the client may have
// two messages of their own type and will want to generate a
// pdelta.Message to get a delta between the types.
//
// If clients only care about applying deltas in one direction, they
// can use either ForwardMessage or ReverseMessage. These are
// wire-compatible with Message but enable a reduction in storage
// usage.
//
// The protocol was designed to be explicit about changes. This means
// that if when applying or reverting a delta on a particular
// message, any change to that message will have at least one bit of
// information. While this helps us to retain potentially critical
// data, this has an added benefit of letting us check if applying a
// change is invalid due to not having generated changes for that
// direction.
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags    Message_Flag `protobuf:"varint,1,opt,name=flags,proto3,enum=pdelta.Message_Flag" json:"flags,omitempty"`
	Fields   []*Field     `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	NewBytes []byte       `protobuf:"bytes,3,opt,name=new_bytes,json=newBytes,proto3" json:"new_bytes,omitempty"`
	OldBytes []byte       `protobuf:"bytes,4,opt,name=old_bytes,json=oldBytes,proto3" json:"old_bytes,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdelta_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_pdelta_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_pdelta_proto_rawDescGZIP(), []int{3}
}

func (x *Message) GetFlags() Message_Flag {
	if x != nil {
		return x.Flags
	}
	return Message_FLAG_UNSPECIFIED
}

func (x *Message) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Message) GetNewBytes() []byte {
	if x != nil {
		return x.NewBytes
	}
	return nil
}

func (x *Message) GetOldBytes() []byte {
	if x != nil {
		return x.OldBytes
	}
	return nil
}

// See `Field` for documentation.
type ReverseField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags      ReverseField_Flag `protobuf:"varint,1,opt,name=flags,proto3,enum=pdelta.ReverseField_Flag" json:"flags,omitempty"`
	Fields     []*ReverseField   `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	OldBytes   []byte            `protobuf:"bytes,4,opt,name=old_bytes,json=oldBytes,proto3" json:"old_bytes,omitempty"`
	Number     int32             `protobuf:"varint,5,opt,name=number,proto3" json:"number,omitempty"`
	Index      int32             `protobuf:"varint,6,opt,name=index,proto3" json:"index,omitempty"`
	NewIndex   int32             `protobuf:"varint,7,opt,name=new_index,json=newIndex,proto3" json:"new_index,omitempty"`
	OldIndex   int32             `protobuf:"varint,8,opt,name=old_index,json=oldIndex,proto3" json:"old_index,omitempty"`
	OldVarint  uint64            `protobuf:"varint,10,opt,name=old_varint,json=oldVarint,proto3" json:"old_varint,omitempty"`
	OldFixed32 uint32            `protobuf:"fixed32,12,opt,name=old_fixed32,json=oldFixed32,proto3" json:"old_fixed32,omitempty"`
	OldFixed64 uint64            `protobuf:"fixed64,14,opt,name=old_fixed64,json=oldFixed64,proto3" json:"old_fixed64,omitempty"`
}

func (x *ReverseField) Reset() {
	*x = ReverseField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdelta_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReverseField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReverseField) ProtoMessage() {}

func (x *ReverseField) ProtoReflect() protoreflect.Message {
	mi := &file_pdelta_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReverseField.ProtoReflect.Descriptor instead.
func (*ReverseField) Descriptor() ([]byte, []int) {
	return file_pdelta_proto_rawDescGZIP(), []int{4}
}

func (x *ReverseField) GetFlags() ReverseField_Flag {
	if x != nil {
		return x.Flags
	}
	return ReverseField_FLAG_UNSPECIFIED
}

func (x *ReverseField) GetFields() []*ReverseField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ReverseField) GetOldBytes() []byte {
	if x != nil {
		return x.OldBytes
	}
	return nil
}

func (x *ReverseField) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ReverseField) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ReverseField) GetNewIndex() int32 {
	if x != nil {
		return x.NewIndex
	}
	return 0
}

func (x *ReverseField) GetOldIndex() int32 {
	if x != nil {
		return x.OldIndex
	}
	return 0
}

func (x *ReverseField) GetOldVarint() uint64 {
	if x != nil {
		return x.OldVarint
	}
	return 0
}

func (x *ReverseField) GetOldFixed32() uint32 {
	if x != nil {
		return x.OldFixed32
	}
	return 0
}

func (x *ReverseField) GetOldFixed64() uint64 {
	if x != nil {
		return x.OldFixed64
	}
	return 0
}

// See `Field` and `Message` for documentation.
type ReverseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags    ReverseMessage_Flag `protobuf:"varint,1,opt,name=flags,proto3,enum=pdelta.ReverseMessage_Flag" json:"flags,omitempty"`
	Fields   []*ReverseField     `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	OldBytes []byte              `protobuf:"bytes,4,opt,name=old_bytes,json=oldBytes,proto3" json:"old_bytes,omitempty"`
}

func (x *ReverseMessage) Reset() {
	*x = ReverseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdelta_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReverseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReverseMessage) ProtoMessage() {}

func (x *ReverseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pdelta_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReverseMessage.ProtoReflect.Descriptor instead.
func (*ReverseMessage) Descriptor() ([]byte, []int) {
	return file_pdelta_proto_rawDescGZIP(), []int{5}
}

func (x *ReverseMessage) GetFlags() ReverseMessage_Flag {
	if x != nil {
		return x.Flags
	}
	return ReverseMessage_FLAG_UNSPECIFIED
}

func (x *ReverseMessage) GetFields() []*ReverseField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ReverseMessage) GetOldBytes() []byte {
	if x != nil {
		return x.OldBytes
	}
	return nil
}

var File_pdelta_proto protoreflect.FileDescriptor

var file_pdelta_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x70, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x22, 0xc2, 0x06, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x28, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x70, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x46,
	0x6c, 0x61, 0x67, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65,
	0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x72, 0x69,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x72, 0x69, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x22, 0x83, 0x03, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x14,
	0x0a, 0x10, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x45, 0x57, 0x5f, 0x49, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x45, 0x57, 0x5f,
	0x49, 0x53, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x4e, 0x45, 0x57, 0x5f, 0x49, 0x53, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4e,
	0x45, 0x57, 0x5f, 0x49, 0x53, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x49,
	0x58, 0x45, 0x44, 0x33, 0x32, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x45, 0x57, 0x5f, 0x49,
	0x53, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44, 0x36,
	0x34, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x45, 0x57, 0x5f, 0x49, 0x53, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x45, 0x4c, 0x53, 0x45, 0x57, 0x48, 0x45, 0x52, 0x45, 0x10, 0x06, 0x12, 0x11, 0x0a,
	0x0d, 0x4e, 0x45, 0x57, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x10, 0x07,
	0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x4c, 0x44, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53,
	0x45, 0x54, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x4c, 0x44, 0x5f, 0x49, 0x53, 0x5f, 0x45,
	0x4d, 0x50, 0x54, 0x59, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x10, 0x12, 0x19, 0x0a, 0x15,
	0x4f, 0x4c, 0x44, 0x5f, 0x49, 0x53, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x56,
	0x41, 0x52, 0x49, 0x4e, 0x54, 0x10, 0x18, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x4c, 0x44, 0x5f, 0x49,
	0x53, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44, 0x33,
	0x32, 0x10, 0x20, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x4c, 0x44, 0x5f, 0x49, 0x53, 0x5f, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44, 0x36, 0x34, 0x10, 0x28, 0x12,
	0x18, 0x0a, 0x14, 0x4f, 0x4c, 0x44, 0x5f, 0x49, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x45, 0x4c,
	0x53, 0x45, 0x57, 0x48, 0x45, 0x52, 0x45, 0x10, 0x30, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x4c, 0x44,
	0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x10, 0x38, 0x12, 0x0d, 0x0a, 0x09,
	0x55, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x40, 0x22, 0x93, 0x04, 0x0a, 0x0c,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2f, 0x0a, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x65, 0x77, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x6e, 0x65, 0x77, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x72, 0x69, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x22, 0xbd, 0x01, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x4c,
	0x41, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x45, 0x57, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53,
	0x45, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x45, 0x57, 0x5f, 0x49, 0x53, 0x5f, 0x45,
	0x4d, 0x50, 0x54, 0x59, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15,
	0x4e, 0x45, 0x57, 0x5f, 0x49, 0x53, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x56,
	0x41, 0x52, 0x49, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x45, 0x57, 0x5f, 0x49,
	0x53, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44, 0x33,
	0x32, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x45, 0x57, 0x5f, 0x49, 0x53, 0x5f, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44, 0x36, 0x34, 0x10, 0x05, 0x12,
	0x11, 0x0a, 0x0d, 0x4e, 0x45, 0x57, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x4d, 0x41, 0x53, 0x4b,
	0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10,
	0x40, 0x22, 0xeb, 0x01, 0x0a, 0x0e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x6c, 0x61, 0x67,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x22, 0x5b, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x4c,
	0x41, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x45, 0x57, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53,
	0x45, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x45, 0x57, 0x5f, 0x49, 0x53, 0x5f, 0x45,
	0x4d, 0x50, 0x54, 0x59, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x4e, 0x45, 0x57, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x10, 0x07, 0x22,
	0xb3, 0x02, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x6c, 0x61, 0x67,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x6c, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x6f, 0x6c, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x04, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x45, 0x57, 0x5f, 0x49,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4e,
	0x45, 0x57, 0x5f, 0x49, 0x53, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x42, 0x59, 0x54, 0x45,
	0x53, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x45, 0x57, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f,
	0x4d, 0x41, 0x53, 0x4b, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x4c, 0x44, 0x5f, 0x49, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x4c,
	0x44, 0x5f, 0x49, 0x53, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53,
	0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x4c, 0x44, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x4d,
	0x41, 0x53, 0x4b, 0x10, 0x38, 0x22, 0x93, 0x04, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x46, 0x6c, 0x61, 0x67,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a,
	0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x6c,
	0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x6f, 0x6c, 0x64, 0x56, 0x61, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x6c, 0x64,
	0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0a,
	0x6f, 0x6c, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x6c,
	0x64, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0a, 0x6f, 0x6c, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x22, 0xbd, 0x01, 0x0a, 0x04,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x4c,
	0x44, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x08, 0x12, 0x16,
	0x0a, 0x12, 0x4f, 0x4c, 0x44, 0x5f, 0x49, 0x53, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x42,
	0x59, 0x54, 0x45, 0x53, 0x10, 0x10, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x4c, 0x44, 0x5f, 0x49, 0x53,
	0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x4e, 0x54, 0x10,
	0x18, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x4c, 0x44, 0x5f, 0x49, 0x53, 0x5f, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44, 0x33, 0x32, 0x10, 0x20, 0x12, 0x1a, 0x0a,
	0x16, 0x4f, 0x4c, 0x44, 0x5f, 0x49, 0x53, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f,
	0x46, 0x49, 0x58, 0x45, 0x44, 0x36, 0x34, 0x10, 0x28, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x4c, 0x44,
	0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x10, 0x38, 0x12, 0x0d, 0x0a, 0x09,
	0x55, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x40, 0x22, 0xeb, 0x01, 0x0a, 0x0e,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x70, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x5b, 0x0a, 0x04,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x4c,
	0x44, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x08, 0x12, 0x16,
	0x0a, 0x12, 0x4f, 0x4c, 0x44, 0x5f, 0x49, 0x53, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x42,
	0x59, 0x54, 0x45, 0x53, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x4c, 0x44, 0x5f, 0x46, 0x4c,
	0x41, 0x47, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x10, 0x38, 0x2a, 0xa4, 0x01, 0x0a, 0x04, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x54, 0x5f,
	0x53, 0x45, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x42,
	0x59, 0x54, 0x45, 0x53, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44, 0x33, 0x32, 0x10, 0x04, 0x12,
	0x13, 0x0a, 0x0f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44,
	0x36, 0x34, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x54, 0x5f, 0x45, 0x4c, 0x53, 0x45,
	0x57, 0x48, 0x45, 0x52, 0x45, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x53, 0x4b, 0x10,
	0x07, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x40,
	0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74,
	0x6f, 0x6d, 0x6c, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x64, 0x2f, 0x70, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x2f, 0x70, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_pdelta_proto_rawDescOnce sync.Once
	file_pdelta_proto_rawDescData = file_pdelta_proto_rawDesc
)

func file_pdelta_proto_rawDescGZIP() []byte {
	file_pdelta_proto_rawDescOnce.Do(func() {
		file_pdelta_proto_rawDescData = protoimpl.X.CompressGZIP(file_pdelta_proto_rawDescData)
	})
	return file_pdelta_proto_rawDescData
}

var file_pdelta_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_pdelta_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_pdelta_proto_goTypes = []interface{}{
	(Flag)(0),                // 0: pdelta.Flag
	(Field_Flag)(0),          // 1: pdelta.Field.Flag
	(ForwardField_Flag)(0),   // 2: pdelta.ForwardField.Flag
	(ForwardMessage_Flag)(0), // 3: pdelta.ForwardMessage.Flag
	(Message_Flag)(0),        // 4: pdelta.Message.Flag
	(ReverseField_Flag)(0),   // 5: pdelta.ReverseField.Flag
	(ReverseMessage_Flag)(0), // 6: pdelta.ReverseMessage.Flag
	(*Field)(nil),            // 7: pdelta.Field
	(*ForwardField)(nil),     // 8: pdelta.ForwardField
	(*ForwardMessage)(nil),   // 9: pdelta.ForwardMessage
	(*Message)(nil),          // 10: pdelta.Message
	(*ReverseField)(nil),     // 11: pdelta.ReverseField
	(*ReverseMessage)(nil),   // 12: pdelta.ReverseMessage
}
var file_pdelta_proto_depIdxs = []int32{
	1,  // 0: pdelta.Field.flags:type_name -> pdelta.Field.Flag
	7,  // 1: pdelta.Field.fields:type_name -> pdelta.Field
	2,  // 2: pdelta.ForwardField.flags:type_name -> pdelta.ForwardField.Flag
	8,  // 3: pdelta.ForwardField.fields:type_name -> pdelta.ForwardField
	3,  // 4: pdelta.ForwardMessage.flags:type_name -> pdelta.ForwardMessage.Flag
	8,  // 5: pdelta.ForwardMessage.fields:type_name -> pdelta.ForwardField
	4,  // 6: pdelta.Message.flags:type_name -> pdelta.Message.Flag
	7,  // 7: pdelta.Message.fields:type_name -> pdelta.Field
	5,  // 8: pdelta.ReverseField.flags:type_name -> pdelta.ReverseField.Flag
	11, // 9: pdelta.ReverseField.fields:type_name -> pdelta.ReverseField
	6,  // 10: pdelta.ReverseMessage.flags:type_name -> pdelta.ReverseMessage.Flag
	11, // 11: pdelta.ReverseMessage.fields:type_name -> pdelta.ReverseField
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_pdelta_proto_init() }
func file_pdelta_proto_init() {
	if File_pdelta_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pdelta_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdelta_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdelta_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdelta_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdelta_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReverseField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdelta_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReverseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pdelta_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pdelta_proto_goTypes,
		DependencyIndexes: file_pdelta_proto_depIdxs,
		EnumInfos:         file_pdelta_proto_enumTypes,
		MessageInfos:      file_pdelta_proto_msgTypes,
	}.Build()
	File_pdelta_proto = out.File
	file_pdelta_proto_rawDesc = nil
	file_pdelta_proto_goTypes = nil
	file_pdelta_proto_depIdxs = nil
}
